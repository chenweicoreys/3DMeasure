/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsRange : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsRange(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsRange obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsRange() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsRange(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsRange(int f, int l) : this(xsensdeviceapiPINVOKE.new_XsRange__SWIG_0(f, l), true) {
  }

  public XsRange(int f) : this(xsensdeviceapiPINVOKE.new_XsRange__SWIG_1(f), true) {
  }

  public XsRange() : this(xsensdeviceapiPINVOKE.new_XsRange__SWIG_2(), true) {
  }

  public XsRange(XsRange other) : this(xsensdeviceapiPINVOKE.new_XsRange__SWIG_3(XsRange.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int count() {
    int ret = xsensdeviceapiPINVOKE.XsRange_count(swigCPtr);
    return ret;
  }

  public int interval() {
    int ret = xsensdeviceapiPINVOKE.XsRange_interval(swigCPtr);
    return ret;
  }

  public bool contains(int i) {
    bool ret = xsensdeviceapiPINVOKE.XsRange_contains(swigCPtr, i);
    return ret;
  }

  public void setRange(int f, int l) {
    xsensdeviceapiPINVOKE.XsRange_setRange(swigCPtr, f, l);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsRange_empty(swigCPtr);
    return ret;
  }

  public int first() {
    int ret = xsensdeviceapiPINVOKE.XsRange_first(swigCPtr);
    return ret;
  }

  public int last() {
    int ret = xsensdeviceapiPINVOKE.XsRange_last(swigCPtr);
    return ret;
  }

}

}
