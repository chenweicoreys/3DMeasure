/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsCallback : XsCallbackPlainC {
  private HandleRef swigCPtr;

  internal XsCallback(IntPtr cPtr, bool cMemoryOwn) : base(xsensdeviceapiPINVOKE.XsCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsCallback() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public XsCallback() : this(xsensdeviceapiPINVOKE.new_XsCallback(), true) {
    SwigDirectorConnect();
  }

  protected virtual void onDeviceStateChanged(SWIGTYPE_p_XsDevice dev, XsDeviceState newState, XsDeviceState oldState) {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0)) xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChangedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState, (int)oldState); else xsensdeviceapiPINVOKE.XsCallback_onDeviceStateChanged(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState, (int)oldState);
  }

  protected virtual void onDataAvailable(SWIGTYPE_p_XsDevice dev, XsDataPacket packet) {
    if (SwigDerivedClassHasMethod("onDataAvailable", swigMethodTypes1)) xsensdeviceapiPINVOKE.XsCallback_onDataAvailableSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet)); else xsensdeviceapiPINVOKE.XsCallback_onDataAvailable(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(packet));
  }

  protected virtual void onMissedPackets(SWIGTYPE_p_XsDevice dev, int count, int first, int last) {
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2)) xsensdeviceapiPINVOKE.XsCallback_onMissedPacketsSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), count, first, last); else xsensdeviceapiPINVOKE.XsCallback_onMissedPackets(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), count, first, last);
  }

  protected virtual void onWakeupReceived(SWIGTYPE_p_XsDevice dev) {
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3)) xsensdeviceapiPINVOKE.XsCallback_onWakeupReceivedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev)); else xsensdeviceapiPINVOKE.XsCallback_onWakeupReceived(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev));
  }

  protected virtual void onProgressUpdated(SWIGTYPE_p_XsDevice dev, int current, int total, XsString identifier) {
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4)) xsensdeviceapiPINVOKE.XsCallback_onProgressUpdatedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier)); else xsensdeviceapiPINVOKE.XsCallback_onProgressUpdated(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), current, total, XsString.getCPtr(identifier));
  }

  protected virtual int onWriteMessageToLogFile(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    int ret = (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5) ? xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFileSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)) : xsensdeviceapiPINVOKE.XsCallback_onWriteMessageToLogFile(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)));
    return ret;
  }

  protected virtual int onWriteDataToLogFile(SWIGTYPE_p_XsDevice dev, XsDataPacket data) {
    int ret = (SwigDerivedClassHasMethod("onWriteDataToLogFile", swigMethodTypes6) ? xsensdeviceapiPINVOKE.XsCallback_onWriteDataToLogFileSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(data)) : xsensdeviceapiPINVOKE.XsCallback_onWriteDataToLogFile(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsDataPacket.getCPtr(data)));
    return ret;
  }

  protected virtual void onConnectivityChanged(SWIGTYPE_p_XsDevice dev, XsConnectivityState newState) {
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7)) xsensdeviceapiPINVOKE.XsCallback_onConnectivityChangedSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState); else xsensdeviceapiPINVOKE.XsCallback_onConnectivityChanged(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)newState);
  }

  protected virtual void onInfoResponse(SWIGTYPE_p_XsDevice dev, XsInfoRequest request) {
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8)) xsensdeviceapiPINVOKE.XsCallback_onInfoResponseSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)request); else xsensdeviceapiPINVOKE.XsCallback_onInfoResponse(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)request);
  }

  protected virtual void onError(SWIGTYPE_p_XsDevice dev, XsResultValue error) {
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9)) xsensdeviceapiPINVOKE.XsCallback_onErrorSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)error); else xsensdeviceapiPINVOKE.XsCallback_onError(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), (int)error);
  }

  protected virtual void onNonDataMessage(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10)) xsensdeviceapiPINVOKE.XsCallback_onNonDataMessageSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onNonDataMessage(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageReceivedFromDevice(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes11)) xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDeviceSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageReceivedFromDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  protected virtual void onMessageSentToDevice(SWIGTYPE_p_XsDevice dev, XsMessage message) {
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes12)) xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDeviceSwigExplicitXsCallback(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message)); else xsensdeviceapiPINVOKE.XsCallback_onMessageSentToDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev), XsMessage.getCPtr(message));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onDeviceStateChanged", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateXsCallback_0(SwigDirectoronDeviceStateChanged);
    if (SwigDerivedClassHasMethod("onDataAvailable", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateXsCallback_1(SwigDirectoronDataAvailable);
    if (SwigDerivedClassHasMethod("onMissedPackets", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateXsCallback_2(SwigDirectoronMissedPackets);
    if (SwigDerivedClassHasMethod("onWakeupReceived", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateXsCallback_3(SwigDirectoronWakeupReceived);
    if (SwigDerivedClassHasMethod("onProgressUpdated", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateXsCallback_4(SwigDirectoronProgressUpdated);
    if (SwigDerivedClassHasMethod("onWriteMessageToLogFile", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateXsCallback_5(SwigDirectoronWriteMessageToLogFile);
    if (SwigDerivedClassHasMethod("onWriteDataToLogFile", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateXsCallback_6(SwigDirectoronWriteDataToLogFile);
    if (SwigDerivedClassHasMethod("onConnectivityChanged", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateXsCallback_7(SwigDirectoronConnectivityChanged);
    if (SwigDerivedClassHasMethod("onInfoResponse", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateXsCallback_8(SwigDirectoronInfoResponse);
    if (SwigDerivedClassHasMethod("onError", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateXsCallback_9(SwigDirectoronError);
    if (SwigDerivedClassHasMethod("onNonDataMessage", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateXsCallback_10(SwigDirectoronNonDataMessage);
    if (SwigDerivedClassHasMethod("onMessageReceivedFromDevice", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateXsCallback_11(SwigDirectoronMessageReceivedFromDevice);
    if (SwigDerivedClassHasMethod("onMessageSentToDevice", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateXsCallback_12(SwigDirectoronMessageSentToDevice);
    xsensdeviceapiPINVOKE.XsCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(XsCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectoronDeviceStateChanged(IntPtr dev, int newState, int oldState) {
    onDeviceStateChanged((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsDeviceState)newState, (XsDeviceState)oldState);
  }

  private void SwigDirectoronDataAvailable(IntPtr dev, IntPtr packet) {
    onDataAvailable((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (packet == IntPtr.Zero) ? null : new XsDataPacket(packet, false));
  }

  private void SwigDirectoronMissedPackets(IntPtr dev, int count, int first, int last) {
    onMissedPackets((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), count, first, last);
  }

  private void SwigDirectoronWakeupReceived(IntPtr dev) {
    onWakeupReceived((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false));
  }

  private void SwigDirectoronProgressUpdated(IntPtr dev, int current, int total, IntPtr identifier) {
    onProgressUpdated((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), current, total, (identifier == IntPtr.Zero) ? null : new XsString(identifier, false));
  }

  private int SwigDirectoronWriteMessageToLogFile(IntPtr dev, IntPtr message) {
    return onWriteMessageToLogFile((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private int SwigDirectoronWriteDataToLogFile(IntPtr dev, IntPtr data) {
    return onWriteDataToLogFile((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (data == IntPtr.Zero) ? null : new XsDataPacket(data, false));
  }

  private void SwigDirectoronConnectivityChanged(IntPtr dev, int newState) {
    onConnectivityChanged((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsConnectivityState)newState);
  }

  private void SwigDirectoronInfoResponse(IntPtr dev, int request) {
    onInfoResponse((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsInfoRequest)request);
  }

  private void SwigDirectoronError(IntPtr dev, int error) {
    onError((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (XsResultValue)error);
  }

  private void SwigDirectoronNonDataMessage(IntPtr dev, IntPtr message) {
    onNonDataMessage((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronMessageReceivedFromDevice(IntPtr dev, IntPtr message) {
    onMessageReceivedFromDevice((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  private void SwigDirectoronMessageSentToDevice(IntPtr dev, IntPtr message) {
    onMessageSentToDevice((dev == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDevice(dev, false), (message == IntPtr.Zero) ? null : new XsMessage(message, false));
  }

  public delegate void SwigDelegateXsCallback_0(IntPtr dev, int newState, int oldState);
  public delegate void SwigDelegateXsCallback_1(IntPtr dev, IntPtr packet);
  public delegate void SwigDelegateXsCallback_2(IntPtr dev, int count, int first, int last);
  public delegate void SwigDelegateXsCallback_3(IntPtr dev);
  public delegate void SwigDelegateXsCallback_4(IntPtr dev, int current, int total, IntPtr identifier);
  public delegate int SwigDelegateXsCallback_5(IntPtr dev, IntPtr message);
  public delegate int SwigDelegateXsCallback_6(IntPtr dev, IntPtr data);
  public delegate void SwigDelegateXsCallback_7(IntPtr dev, int newState);
  public delegate void SwigDelegateXsCallback_8(IntPtr dev, int request);
  public delegate void SwigDelegateXsCallback_9(IntPtr dev, int error);
  public delegate void SwigDelegateXsCallback_10(IntPtr dev, IntPtr message);
  public delegate void SwigDelegateXsCallback_11(IntPtr dev, IntPtr message);
  public delegate void SwigDelegateXsCallback_12(IntPtr dev, IntPtr message);

  private SwigDelegateXsCallback_0 swigDelegate0;
  private SwigDelegateXsCallback_1 swigDelegate1;
  private SwigDelegateXsCallback_2 swigDelegate2;
  private SwigDelegateXsCallback_3 swigDelegate3;
  private SwigDelegateXsCallback_4 swigDelegate4;
  private SwigDelegateXsCallback_5 swigDelegate5;
  private SwigDelegateXsCallback_6 swigDelegate6;
  private SwigDelegateXsCallback_7 swigDelegate7;
  private SwigDelegateXsCallback_8 swigDelegate8;
  private SwigDelegateXsCallback_9 swigDelegate9;
  private SwigDelegateXsCallback_10 swigDelegate10;
  private SwigDelegateXsCallback_11 swigDelegate11;
  private SwigDelegateXsCallback_12 swigDelegate12;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDeviceState), typeof(XsDeviceState) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDataPacket) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(int), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(SWIGTYPE_p_XsDevice) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(int), typeof(int), typeof(XsString) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsDataPacket) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsConnectivityState) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsInfoRequest) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsResultValue) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(SWIGTYPE_p_XsDevice), typeof(XsMessage) };
}

}
