/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsTimeStamp : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsTimeStamp(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsTimeStamp obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsTimeStamp() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsTimeStamp(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsTimeStamp(long t) : this(xsensdeviceapiPINVOKE.new_XsTimeStamp__SWIG_0(t), true) {
  }

  public XsTimeStamp() : this(xsensdeviceapiPINVOKE.new_XsTimeStamp__SWIG_1(), true) {
  }

  public XsTimeStamp(int t) : this(xsensdeviceapiPINVOKE.new_XsTimeStamp__SWIG_2(t), true) {
  }

  public XsTimeStamp(XsTimeStamp other) : this(xsensdeviceapiPINVOKE.new_XsTimeStamp__SWIG_3(XsTimeStamp.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsTimeStamp(XsUtcTime utc) : this(xsensdeviceapiPINVOKE.new_XsTimeStamp__SWIG_4(XsUtcTime.getCPtr(utc)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void toUtcTime(XsUtcTime utc) {
    xsensdeviceapiPINVOKE.XsTimeStamp_toUtcTime(swigCPtr, XsUtcTime.getCPtr(utc));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public long msTime() {
    long ret = xsensdeviceapiPINVOKE.XsTimeStamp_msTime(swigCPtr);
    return ret;
  }

  public void setMsTime(long t) {
    xsensdeviceapiPINVOKE.XsTimeStamp_setMsTime(swigCPtr, t);
  }

  public double timeOfDay() {
    double ret = xsensdeviceapiPINVOKE.XsTimeStamp_timeOfDay(swigCPtr);
    return ret;
  }

  public long msTimeOfDay() {
    long ret = xsensdeviceapiPINVOKE.XsTimeStamp_msTimeOfDay(swigCPtr);
    return ret;
  }

  public double secTime() {
    double ret = xsensdeviceapiPINVOKE.XsTimeStamp_secTime(swigCPtr);
    return ret;
  }

  public void setSecTime(double t) {
    xsensdeviceapiPINVOKE.XsTimeStamp_setSecTime(swigCPtr, t);
  }

  public long secondTime() {
    long ret = xsensdeviceapiPINVOKE.XsTimeStamp_secondTime(swigCPtr);
    return ret;
  }

  public int milliSecondPart() {
    int ret = xsensdeviceapiPINVOKE.XsTimeStamp_milliSecondPart(swigCPtr);
    return ret;
  }

  public int secondPart() {
    int ret = xsensdeviceapiPINVOKE.XsTimeStamp_secondPart(swigCPtr);
    return ret;
  }

  public int minutePart() {
    int ret = xsensdeviceapiPINVOKE.XsTimeStamp_minutePart(swigCPtr);
    return ret;
  }

  public int hourPart() {
    int ret = xsensdeviceapiPINVOKE.XsTimeStamp_hourPart(swigCPtr);
    return ret;
  }

  public static XsTimeStamp now() {
    XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.XsTimeStamp_now(), true);
    return ret;
  }

  public static long nowMs() {
    long ret = xsensdeviceapiPINVOKE.XsTimeStamp_nowMs();
    return ret;
  }

  public static XsTimeStamp maxValue() {
    XsTimeStamp ret = new XsTimeStamp(xsensdeviceapiPINVOKE.XsTimeStamp_maxValue(), true);
    return ret;
  }

}

}
