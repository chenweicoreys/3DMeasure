/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsSdiData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsSdiData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsSdiData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsSdiData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsSdiData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsSdiData() : this(xsensdeviceapiPINVOKE.new_XsSdiData__SWIG_0(), true) {
  }

  public XsSdiData(XsQuaternion dq, XsVector dv) : this(xsensdeviceapiPINVOKE.new_XsSdiData__SWIG_1(XsQuaternion.getCPtr(dq), XsVector.getCPtr(dv)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsSdiData(XsSdiData other) : this(xsensdeviceapiPINVOKE.new_XsSdiData__SWIG_2(XsSdiData.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void zero() {
    xsensdeviceapiPINVOKE.XsSdiData_zero(swigCPtr);
  }

  public XsQuaternion orientationIncrement() {
    XsQuaternion ret = new XsQuaternion(xsensdeviceapiPINVOKE.XsSdiData_orientationIncrement(swigCPtr), false);
    return ret;
  }

  public void setOrientationIncrement(XsQuaternion dq) {
    xsensdeviceapiPINVOKE.XsSdiData_setOrientationIncrement(swigCPtr, XsQuaternion.getCPtr(dq));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsVector3 velocityIncrement() {
    XsVector3 ret = new XsVector3(xsensdeviceapiPINVOKE.XsSdiData_velocityIncrement(swigCPtr), false);
    return ret;
  }

  public void setVelocityIncrement(XsVector dv) {
    xsensdeviceapiPINVOKE.XsSdiData_setVelocityIncrement(swigCPtr, XsVector.getCPtr(dv));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
