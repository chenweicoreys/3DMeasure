/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsDataBundler : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDataBundler(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsDataBundler obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDataBundler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDataBundler(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static SWIGTYPE_p_XsDataBundler construct() {
    IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataBundler_construct();
    SWIGTYPE_p_XsDataBundler ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_XsDataBundler(cPtr, false);
    return ret;
  }

  public void destruct() {
    xsensdeviceapiPINVOKE.XsDataBundler_destruct(swigCPtr);
  }

  public void clearCallbackHandlers(bool chain) {
    xsensdeviceapiPINVOKE.XsDataBundler_clearCallbackHandlers__SWIG_0(swigCPtr, chain);
  }

  public void clearCallbackHandlers() {
    xsensdeviceapiPINVOKE.XsDataBundler_clearCallbackHandlers__SWIG_1(swigCPtr);
  }

  public void addCallbackHandler(XsCallbackPlainC cb, bool chain) {
    xsensdeviceapiPINVOKE.XsDataBundler_addCallbackHandler__SWIG_0(swigCPtr, XsCallbackPlainC.getCPtr(cb), chain);
  }

  public void addCallbackHandler(XsCallbackPlainC cb) {
    xsensdeviceapiPINVOKE.XsDataBundler_addCallbackHandler__SWIG_1(swigCPtr, XsCallbackPlainC.getCPtr(cb));
  }

  public void removeCallbackHandler(XsCallbackPlainC cb, bool chain) {
    xsensdeviceapiPINVOKE.XsDataBundler_removeCallbackHandler__SWIG_0(swigCPtr, XsCallbackPlainC.getCPtr(cb), chain);
  }

  public void removeCallbackHandler(XsCallbackPlainC cb) {
    xsensdeviceapiPINVOKE.XsDataBundler_removeCallbackHandler__SWIG_1(swigCPtr, XsCallbackPlainC.getCPtr(cb));
  }

  public XsCallbackPlainC toCallbackPlainC() {
    IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataBundler_toCallbackPlainC(swigCPtr);
    XsCallbackPlainC ret = (cPtr == IntPtr.Zero) ? null : new XsCallbackPlainC(cPtr, false);
    return ret;
  }

  public void addDevice(SWIGTYPE_p_XsDevice dev) {
    xsensdeviceapiPINVOKE.XsDataBundler_addDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev));
  }

  public void removeDevice(SWIGTYPE_p_XsDevice dev) {
    xsensdeviceapiPINVOKE.XsDataBundler_removeDevice(swigCPtr, SWIGTYPE_p_XsDevice.getCPtr(dev));
  }

  public XsDataPacket packet(XsDeviceId deviceId) {
    IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataBundler_packet(swigCPtr, XsDeviceId.getCPtr(deviceId));
    XsDataPacket ret = (cPtr == IntPtr.Zero) ? null : new XsDataPacket(cPtr, false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsDataPacket at(uint idx) {
    IntPtr cPtr = xsensdeviceapiPINVOKE.XsDataBundler_at(swigCPtr, idx);
    XsDataPacket ret = (cPtr == IntPtr.Zero) ? null : new XsDataPacket(cPtr, false);
    return ret;
  }

  public uint count() {
    uint ret = xsensdeviceapiPINVOKE.XsDataBundler_count(swigCPtr);
    return ret;
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsDataBundler_clear(swigCPtr);
  }

  public void clearQueues() {
    xsensdeviceapiPINVOKE.XsDataBundler_clearQueues(swigCPtr);
  }

  public XsDataBundler() : this(xsensdeviceapiPINVOKE.new_XsDataBundler(), true) {
  }

}

}
