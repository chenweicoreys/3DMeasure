/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsPortInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;


     //IntPtr   “平台特定的整数类型”，它们用于本机资源
  internal XsPortInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsPortInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsPortInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsPortInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsPortInfo() : this(xsensdeviceapiPINVOKE.new_XsPortInfo__SWIG_0(), true) {
  }

  public XsPortInfo(XsString portname, XsBaudRate baudRate) : this(xsensdeviceapiPINVOKE.new_XsPortInfo__SWIG_1(XsString.getCPtr(portname), (int)baudRate), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfo(XsString portname) : this(xsensdeviceapiPINVOKE.new_XsPortInfo__SWIG_2(XsString.getCPtr(portname)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsPortInfo(int portNr, XsBaudRate baudRate) : this(xsensdeviceapiPINVOKE.new_XsPortInfo__SWIG_3(portNr, (int)baudRate), true) {
  }

  public XsPortInfo(int portNr) : this(xsensdeviceapiPINVOKE.new_XsPortInfo__SWIG_4(portNr), true) {
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsPortInfo_clear(swigCPtr);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsPortInfo_empty(swigCPtr);
    return ret;
  }

  public int portNumber() {
    int ret = xsensdeviceapiPINVOKE.XsPortInfo_portNumber(swigCPtr);
    return ret;
  }

  public XsString portName() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsPortInfo_portName(swigCPtr), true);
    return ret;
  }

  public void setPortName(XsString portName_) {
    xsensdeviceapiPINVOKE.XsPortInfo_setPortName(swigCPtr, XsString.getCPtr(portName_));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isUsb() {
    bool ret = xsensdeviceapiPINVOKE.XsPortInfo_isUsb(swigCPtr);
    return ret;
  }

  public bool isNetwork() {
    bool ret = xsensdeviceapiPINVOKE.XsPortInfo_isNetwork(swigCPtr);
    return ret;
  }

  public XsString networkServiceName() {
    XsString ret = new XsString(xsensdeviceapiPINVOKE.XsPortInfo_networkServiceName(swigCPtr), true);
    return ret;
  }

  public int usbBus() {
    int ret = xsensdeviceapiPINVOKE.XsPortInfo_usbBus(swigCPtr);
    return ret;
  }

  public int usbAddress() {
    int ret = xsensdeviceapiPINVOKE.XsPortInfo_usbAddress(swigCPtr);
    return ret;
  }

  public XsBaudRate baudrate() {
    XsBaudRate ret = (XsBaudRate)xsensdeviceapiPINVOKE.XsPortInfo_baudrate(swigCPtr);
    return ret;
  }

  public void setBaudrate(XsBaudRate baudrate_) {
    xsensdeviceapiPINVOKE.XsPortInfo_setBaudrate(swigCPtr, (int)baudrate_);
  }

  public XsDeviceId deviceId() {
    XsDeviceId ret = new XsDeviceId(xsensdeviceapiPINVOKE.XsPortInfo_deviceId(swigCPtr), true);
    return ret;
  }

  public void setDeviceId(XsDeviceId deviceId_) {
    xsensdeviceapiPINVOKE.XsPortInfo_setDeviceId(swigCPtr, XsDeviceId.getCPtr(deviceId_));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
