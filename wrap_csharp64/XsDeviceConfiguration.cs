/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsDeviceConfiguration : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsDeviceConfiguration(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsDeviceConfiguration obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsDeviceConfiguration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsDeviceConfiguration(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsDeviceConfiguration(ushort numberOfDevs) : this(xsensdeviceapiPINVOKE.new_XsDeviceConfiguration__SWIG_0(numberOfDevs), true) {
  }

  public XsDeviceConfiguration() : this(xsensdeviceapiPINVOKE.new_XsDeviceConfiguration__SWIG_1(), true) {
  }

  public XsDeviceConfiguration(XsDeviceConfiguration other) : this(xsensdeviceapiPINVOKE.new_XsDeviceConfiguration__SWIG_2(XsDeviceConfiguration.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    xsensdeviceapiPINVOKE.XsDeviceConfiguration_clear(swigCPtr);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceConfiguration_empty(swigCPtr);
    return ret;
  }

  public void readFromMessage(XsMessage msg) {
    xsensdeviceapiPINVOKE.XsDeviceConfiguration_readFromMessage(swigCPtr, XsMessage.getCPtr(msg));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writeToMessage(XsMessage msg) {
    xsensdeviceapiPINVOKE.XsDeviceConfiguration_writeToMessage(swigCPtr, XsMessage.getCPtr(msg));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool containsDevice(XsDeviceId deviceId) {
    bool ret = xsensdeviceapiPINVOKE.XsDeviceConfiguration_containsDevice(swigCPtr, XsDeviceId.getCPtr(deviceId));
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsMtDeviceConfiguration deviceInfo(XsDeviceId deviceId) {
    XsMtDeviceConfiguration ret = new XsMtDeviceConfiguration(xsensdeviceapiPINVOKE.XsDeviceConfiguration_deviceInfo__SWIG_0(swigCPtr, XsDeviceId.getCPtr(deviceId)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XsMtDeviceConfiguration deviceInfo(uint busId) {
    XsMtDeviceConfiguration ret = new XsMtDeviceConfiguration(xsensdeviceapiPINVOKE.XsDeviceConfiguration_deviceInfo__SWIG_1(swigCPtr, busId), false);
    return ret;
  }

  public XsMasterDeviceConfiguration masterInfo() {
    XsMasterDeviceConfiguration ret = new XsMasterDeviceConfiguration(xsensdeviceapiPINVOKE.XsDeviceConfiguration_masterInfo__SWIG_0(swigCPtr), false);
    return ret;
  }

  public void setNumberOfDevices(uint count) {
    xsensdeviceapiPINVOKE.XsDeviceConfiguration_setNumberOfDevices(swigCPtr, count);
  }

  public uint numberOfDevices() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceConfiguration_numberOfDevices(swigCPtr);
    return ret;
  }

  public uint deviceCount() {
    uint ret = xsensdeviceapiPINVOKE.XsDeviceConfiguration_deviceCount(swigCPtr);
    return ret;
  }

}

}
