/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace XDA {

using System;
using System.Runtime.InteropServices;

public class XsMatrix : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XsMatrix(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(XsMatrix obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~XsMatrix() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          xsensdeviceapiPINVOKE.delete_XsMatrix(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public XsMatrix(uint rows, uint cols, uint strde, SWIGTYPE_p_double dat) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_0(rows, cols, strde, SWIGTYPE_p_double.getCPtr(dat)), true) {
  }

  public XsMatrix(uint rows, uint cols, uint strde) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_1(rows, cols, strde), true) {
  }

  public XsMatrix(uint rows, uint cols) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_2(rows, cols), true) {
  }

  public XsMatrix(uint rows) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_3(rows), true) {
  }

  public XsMatrix() : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_4(), true) {
  }

  public XsMatrix(XsMatrix other) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_5(XsMatrix.getCPtr(other)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix(SWIGTYPE_p_double arg0, uint rows, uint cols, uint stride, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_6(SWIGTYPE_p_double.getCPtr(arg0), rows, cols, stride, (int)flags), true) {
  }

  public XsMatrix(SWIGTYPE_p_double arg0, uint rows, uint cols, uint stride) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_7(SWIGTYPE_p_double.getCPtr(arg0), rows, cols, stride), true) {
  }

  public XsMatrix(XsMatrix other, SWIGTYPE_p_double arg1, uint rows, uint cols, uint stride, XsDataFlags flags) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_8(XsMatrix.getCPtr(other), SWIGTYPE_p_double.getCPtr(arg1), rows, cols, stride, (int)flags), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix(XsMatrix other, SWIGTYPE_p_double arg1, uint rows, uint cols, uint stride) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_9(XsMatrix.getCPtr(other), SWIGTYPE_p_double.getCPtr(arg1), rows, cols, stride), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public XsMatrix(XsQuaternion quat) : this(xsensdeviceapiPINVOKE.new_XsMatrix__SWIG_10(XsQuaternion.getCPtr(quat)), true) {
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSize(uint rows, uint cols, uint stride) {
    xsensdeviceapiPINVOKE.XsMatrix_setSize__SWIG_0(swigCPtr, rows, cols, stride);
  }

  public void setSize(uint rows, uint cols) {
    xsensdeviceapiPINVOKE.XsMatrix_setSize__SWIG_1(swigCPtr, rows, cols);
  }

  public bool empty() {
    bool ret = xsensdeviceapiPINVOKE.XsMatrix_empty(swigCPtr);
    return ret;
  }

  public void setZero() {
    xsensdeviceapiPINVOKE.XsMatrix_setZero(swigCPtr);
  }

  public uint offset(uint row, uint column) {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_offset(swigCPtr, row, column);
    return ret;
  }

  public double value(uint row, uint column) {
    double ret = xsensdeviceapiPINVOKE.XsMatrix_value(swigCPtr, row, column);
    return ret;
  }

  public void setValue(uint row, uint column, double value) {
    xsensdeviceapiPINVOKE.XsMatrix_setValue(swigCPtr, row, column, value);
  }

  public XsMatrix fromQuaternion(XsQuaternion quat) {
    XsMatrix ret = new XsMatrix(xsensdeviceapiPINVOKE.XsMatrix_fromQuaternion(swigCPtr, XsQuaternion.getCPtr(quat)), false);
    if (xsensdeviceapiPINVOKE.SWIGPendingException.Pending) throw xsensdeviceapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void zero() {
    xsensdeviceapiPINVOKE.XsMatrix_zero(swigCPtr);
  }

  public uint rows() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_rows(swigCPtr);
    return ret;
  }

  public uint cols() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_cols(swigCPtr);
    return ret;
  }

  public uint stride() {
    uint ret = xsensdeviceapiPINVOKE.XsMatrix_stride(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double data() {
    IntPtr cPtr = xsensdeviceapiPINVOKE.XsMatrix_data(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

}

}
